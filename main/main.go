// package main

// import "fmt"

// func main() {
// 	a := 2
// 	b := 9
// 	for i := a; i < b; i++ {
// 		if i%2 == 0 {
// 			fmt.Println(i)
// 		}
// 	}
// }

// package main

// import (
// 	"fmt"
// 	"math"
// )

// func main() {
// 	a, b := 1, 16

// 	for i := a; i <= b; i++ {
// 		j := math.Sqrt(float64(i))
// 		if float64(i) == j*j {

// 			fmt.Println(i)
// 		}
// 	}
// }
//непонятки с типом данных, математический пакет не извлекает корни из только целых чисел, из-за этого
// получаем некоторые лишние цисла при вычисления. Нужно подробнее разобраться с типами данных

/*Входные данные
Вводится натуральное число x.

Выходные данные
Выведите сумму цифр числа x.*/

// package main

// import "fmt"

// func main() {
// 	a := 9
// 	j := 0
// 	for i := 0; i <= a; i++ {
// 		j += i
// 	}
// 	fmt.Println(j)

// }
/*Найдите самый маленький натуральный делитель числа x, отличный от 1 (2 <= x <= 30000).

Входные данные
Вводится натуральное число x.

Выходные данные
Выведите наименьший делитель числа x, отличный от 1.
*/

// package main

// import "fmt"

// func main() {
// 	x := 6
// 	// num := 1
// 	for i := 1; i < x+1; i++ {
// 		// num = i + 1
// 		if x%i == 0 && i != 1 {
// 			fmt.Println(i)
// 			break
// 		}
// 	}
// }

// Смысл в том, что первый делитель после 1 и есть наименьший

/*Подсчитайте количество натуральных делителей числа x (включая 1 и само число; x≤2∗10^9
).

Входные данные
Вводится натуральное число x.

Выходные данные
Выведите единственное число - количество делителей числа x.*/

// package main

// import "fmt"

// func main() {
// 	x := 250000
// 	res := 0
// 	for i := 1; i <= x; i++ {
// 		num := x % i
// 		if num == 0 {
// 			res += 1
// 		}

// 	}
// 	fmt.Println(res)

// }
// проверить можно на https://izamorfix.ru/matematika/arifmetika/vse_deliteli_chisla.html

/*Вычислите сумму данных N натуральных чисел.

Входные данные
Вводится число N, а затем N чисел, сумму которых необходимо вычислить.

Выходные данные
Выведите единственное число - сумму введенных чисел.

Примеры
входные данные
3
9
5
1
выходные данные
15*/
// Не понял как решить, как оформить входные данные. Скорее всего нужен пользовательский ввод чисел

/*Входные данные
Вводятся 4 числа: a, b, c и d.

Выходные данные
Найдите все целые решения уравнения ax3 + bx2 + cx + d = 0 на отрезке [0,1000] и выведите их в порядке убывания.
Если на данном отрезке нет ни одного решения, то ничего выводить не нужно.*/

// package main

// import "fmt"

// func main() {
// 	a := 1
// 	b := 1
// 	c := 1
// 	d := 1
// 	for i := 1000; i >= 0; i-- {
// 		if a*i*i*i+b*i*i+c*i+d == 0 {
// 			fmt.Println(i)
// 		}

// 	}
// }

// Должно быть так. Нет стартовых данных для проверки

/*Входные данные
Дано количество секунд (от 1 до 1000000), которые работает генератор после включения.

Выходные данные
Результат работы генератора

Примеры
входные данные
2
выходные данные
1 2
входные данные
5
выходные данные
1 2 2 3 3
*/

package main

import "fmt"

func main() {
	n := 12
	cur := 1
	count := 0

	for i := 1; i <= n; i++ {

		fmt.Println(cur)
		count++
		if cur == count {
			cur++
			count = 0
		}
	}

}
